//
// Sass function to use rem units with optional pixel fallback
//
// author: Pierre Burel
// link: https://github.com/pierreburel/sass-rem/blob/master/_rem.scss

$rem-baseline: 16px !default;


@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and ($to == "rem" or $to == "em") {
      $result: append($result, $value / $rem-baseline * 1#{$to}, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem-map-convert($to, $map) {
  $result: $map;

  @each $key, $value in $map {
    $result: map-merge($result, ($key: rem-convert($to, $value...)));
  }

  @debug $to, $map, $result;

  @return $result;
}

@function rem($values...) {
  @return rem-convert("rem", $values...);
}

@function rem-map($map) {
  @return rem-map-convert("rem", $map);
}

@function em($values...) {
  @return rem-convert("em", $values...);
}

@function em-map($map) {
  @return rem-map-convert("em", $map);
}

@function px($values...) {
  @return rem-convert("px", $values...);
}

@function px-map($map) {
  @return rem-map-convert("px", $map);
}
